-# Locals:
-#   recordings (Array of Recording)
-#   show_authors (boolean): show who created the recording?

- show_authors = true if show_authors.nil?

#my-webconference-recordings-list
  .banner
    .banner-wrapper
      .banner-content
        = t('.banner_expiring')
    
  - if recordings.count <= 0
    = t('.no_recordings')

  - else
    - recordings.each do |recording|
      - metaUser = recording.metadata.all.select{ |m| m.name == BigbluebuttonRails.configuration.metadata_user_id.to_s }.first

      - action = recording.room.owner_type == "User" ? :user_show : :space_show
      - if can?(action, recording)

        .thread.thread-no-logo{:class => cycle('thread-even' , 'thread-odd'), :id => "rec-#{recording.id}"}
          .thread-content

            %ul.thread-action-links.visible-on-hover{ :"data-hover-tracked" => "rec-#{recording.id}" }
              - if recording.room.owner_type == "User"
                - if can?(:user_edit, recording)
                  %li= link_to t('_other.edit').downcase, edit_my_recording_path(recording), :class => "open-modal"
              - else
                - if can?(:space_edit, recording)
                  %li= link_to t('_other.edit').downcase, space_edit_recording_path(recording.room.owner, recording), :class => "open-modal"

              - if recording.published? && can?(:unpublish, recording)
                - if recording.available?
                  %li= link_to t('.unpublish').downcase, unpublish_bigbluebutton_recording_path(recording, redir_url: @redir_url), method: :post, data: { confirm: t('.unpublish_confirm') }
                - else
                  %li
                    -# TODO: for now we don't allow users to unpublish unavailable recordings because it would only generate
                    -# an error in the API call and would not actually unpublish it.
                    = content_tag :span, options_for_tooltip(t('.unpublish_unavailable'), { class: "disabled" }) do
                      = t('.unpublish').downcase

              - if can?(:manage, recording)
                %li= link_to t('.manage').downcase, edit_bigbluebutton_recording_path(recording)

            .thread-title
              = icon_recording
              - if recording.description.blank?
                %span.recording-description= t('.no_description')
              - else
                %span.recording-description= recording.description

            .thread-subtitle
              .recording-date{ :title => "#{t('.ended_at')}: #{format_date(recording.end_time)}" }
                = "#{t('.started_at')} #{format_date(recording.start_time)}"

            - if show_authors
              .thread-subtitle
                - unless metaUser.nil?
                  - user = User.find_by_id(metaUser.content)
                  .recording-author
                    = t('.created_by')
                    - unless user.nil?
                      = link_to user.full_name, user_profile_path(user)
                    - else
                      %span= t('_other.user.removed')

            .thread-subtitle
              = render :partial => 'shared/recording_playback', :locals => { :recording => recording }
